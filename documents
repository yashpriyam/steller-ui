steps to setup this project in your device
 > take access to the project
    > first create a folder then start VS code in it,
    > then open terminal and do run "git init" to initialize an empty git repository.
    > then open your github in web browser and accept invition to set up the project in you own device

 > cloning th project in your local device
    > to clone we need to run "git clone" with URL;
    > you cn get that url from the git project repository Url lookes like this " https://github.com/yas@#@@$@#/we!@#$!#@$-portal.git:"
    >  first we need to config the url with your_user name and password, 
    > to get git username and password run "git config user.name" and "git config user.password",
    > then write that user name password in between "https://" and "github.com..........". example:"https://username:password@github.com/yas@#@@$@#/we!@#$!#@$-portal.git:"
    
    complete project is clonned now;

 > then to run that project we need to navigate to client and server in the terminal.
   > to navigate client and server run cd client and cd server in two different termnals.

<!-- things to keep in mind: -->
   > when ever we are clonning or importing something form github, it give us progarm codes only but not that packages in the dependence of package.json and .env file.
   > we need to install that packages and write .env saperately.
   > to install package dependency run "npm i" in both client and server.
   > then we need to write .env file saperatelly in server.ts

> setup .env, its content and use of that content.
   > first you need to make a file in ".env": { .env file is basically use to secure all the credintialls which is use in our project, your .env file will never be visable on the github and it will even not imported at time of clonning.}
   > in this project the env file contains. 
     >PORT : {PORT contain PORT number of your local server}
     >MONGODB_URI : { the MONGODB_URI contains the uri of your MONGODB account in which you will going to create and access you database}
     >JWT_SECRET :{this contains the randon key which is a jsonwebtoken secret which is use to generate a security key}
     >JWT_TOKEN : { this contains the jsonwebtoken's_token which is use to match or verify the user credentials}
     >SENDER_EMAIL : { this contains the Email id it which will be use to send email to the user}
     >SENDER_PASSWORD : { this is the emails password which is generated by the gmail as "app password" which gives access to you application for sending an email};



now you all set to work further in this project;
